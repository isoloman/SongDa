//
//  WTLocationManager.m
//  SongDa
//
//  Created by 灰太狼 on 2018/4/10.
//  Copyright © 2018年 维途. All rights reserved.
//

#import "WTLocationManager.h"
#import "WTAddressReportViewModel.h"
#import <AMapFoundationKit/AMapFoundationKit.h>
#import <AMapLocationKit/AMapLocationKit.h>

@interface WTLocationManager () <AMapLocationManagerDelegate>
@property (strong, nonatomic) AMapLocationManager *locationManager;
@property (strong, nonatomic) WTAddressReportViewModel *viewModel;
@end

@implementation WTLocationManager

// GCD定时器
static dispatch_source_t _timer;

- (WTAddressReportViewModel *)viewModel
{
    if (_viewModel == nil) {
        _viewModel = [[WTAddressReportViewModel alloc] init];
    }
    return _viewModel;
}

+ (instancetype)shareInstance {
    static WTLocationManager *_instace = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _instace = [[self alloc] init];
    });
    return _instace;
}

- (instancetype)init {
    if (self = [super init]) {
        self.locationManager = [[AMapLocationManager alloc] init];
        self.locationManager.delegate = self;
        self.locationManager.locatingWithReGeocode = YES;
        
        if ([WTAccountManager sharedManager].isLogined) {
            [self startGCDTimer];
        }
    }
    return self;
}

#pragma mark - <消息请求定时器>
- (void)startGCDTimer
{
    NSTimeInterval period = 3*60.0; //设置时间间隔
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
    dispatch_source_set_timer(_timer, dispatch_walltime(NULL, 0), period * NSEC_PER_SEC, 0); //每秒执行
    // 事件回调
    dispatch_source_set_event_handler(_timer, ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [self reportCurrentAddress];
        });
    });
    
    // 开启定时器
    dispatch_resume(_timer);
}

- (void)start {
    [self.locationManager startUpdatingLocation];
}

- (void)reportCurrentAddress {
    WTWeakSelf;
    [self.locationManager requestLocationWithReGeocode:YES completionBlock:^(CLLocation *location, AMapLocationReGeocode *regeocode, NSError *error) {
        if (regeocode) {
            NSString *address = [NSString stringWithFormat:@"%@%@%@%@",regeocode.city,regeocode.district,regeocode.street,regeocode.number];
            NSMutableDictionary *paras = [NSMutableDictionary dictionary];
            paras[@"lng"] = @(weakSelf.longitude);
            paras[@"lat"] = @(weakSelf.latitude);
            paras[@"address"] = address;
            paras[@"userId"] = [WTAccountManager sharedManager].userId;
            [weakSelf.viewModel dataByParameters:paras success:^(id obj) {
                HYXLog(@"成功报告当前地址！");
            } failure:^(NSError *error, NSString *message) {
                HYXLog(@"报告当前地址失败！");
            }];
        }
    }];
}

- (CGFloat)longitude {
    [self start];
    return _longitude;
}

#pragma mark - <AMapLocationManagerDelegate>
- (void)amapLocationManager:(AMapLocationManager *)manager didUpdateLocation:(CLLocation *)location {
    CLLocationCoordinate2D coordinate2D = location.coordinate;
    self.longitude = coordinate2D.longitude;
    self.latitude = coordinate2D.latitude;
    HYXLog(@"经度 %f  纬度 %f", self.longitude,self.latitude);
    [manager stopUpdatingLocation];
}

@end
